{"version":3,"file":"static/js/387.8cbd3089.chunk.js","mappings":"yMAEaA,EAAYC,EAAAA,EAAAA,IAAH,8DAKTC,EAAWD,EAAAA,EAAAA,GAAH,wRAaRE,EAAWF,EAAAA,EAAAA,GAAH,kLAMRG,EAAWH,EAAAA,EAAAA,EAAH,8GAQRI,EAAcJ,EAAAA,EAAAA,IAAH,+G,kBCexB,EArCa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAqBN,GAASO,MAAK,SAAAC,GAAI,OAAIJ,EAAQI,EAAZ,GACxC,GAAE,CAACR,IAECG,GAGH,+BACE,SAACT,EAAD,WACE,SAACE,EAAD,UACGO,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAAChB,EAAD,YACE,gBACEiB,IACED,EAAY,0CAC2BA,GACnCE,EAENC,IAAKL,KAEP,UAACZ,EAAD,WACG,KACD,SAACD,EAAD,UAAWa,KACX,UAACb,EAAD,yBAAsBc,UAZXF,EADP,UANA,IA2BnB,C,8LC9CKO,EAAW,mCAEjBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAgB,mCAAG,uGAEfD,EAAAA,GAAAA,IAAA,sCACyBD,IACnCV,MAAK,SAAAa,GAAC,OAAIA,EAAEZ,KAAKa,OAAX,IAJmB,8EAMtB,IAAIC,MAAJ,MANsB,wDAAH,qDAUhBC,EAAiB,mCAAG,WAAMC,GAAN,0FAEhBN,EAAAA,GAAAA,IAAA,gCACmBD,EADnB,iCACoDO,IAC9DjB,MAAK,SAAAa,GAAC,OAAIA,EAAEZ,KAAKa,OAAX,IAJoB,8EAMvB,IAAIC,MAAJ,MANuB,wDAAH,sDASjBG,EAAoB,mCAAG,WAAMzB,GAAN,0FAEnBkB,EAAAA,GAAAA,IAAA,iBACIlB,EADJ,oBACuBiB,EADvB,oBAEVV,MAAK,SAAAa,GAAC,OAAIA,EAAEZ,IAAN,IAJuB,8EAM1B,IAAIc,MAAJ,MAN0B,wDAAH,sDASpBhB,EAAoB,mCAAG,WAAMN,GAAN,0FAEnBkB,EAAAA,GAAAA,IAAA,iBACIlB,EADJ,4BAC+BiB,EAD/B,oBAEVV,MAAK,SAAAa,GAAC,OAAIA,EAAEZ,KAAKL,IAAX,IAJuB,8EAM1B,IAAImB,MAAJ,MAN0B,wDAAH,sDAUpBI,EAAoB,mCAAG,WAAM1B,GAAN,0FAEnBkB,EAAAA,GAAAA,IAAA,iBAEClB,EAFD,4BAE4BiB,EAF5B,2BAIVV,MAAK,SAAAa,GAAC,OAAIA,EAAEZ,KAAKa,OAAX,IANuB,8EAQ1B,IAAIC,MAAJ,MAR0B,wDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/fetchMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  padding: 20px 0;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CastText = styled.p`\n  margin-top: 0;\n  margin-bottom: 5px;\n  :last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const CastContent = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchGetMovieCredits } from '../../utils/fetchMovies.js';\nimport {\n  Container,\n  CastList,\n  CastItem,\n  CastText,\n  CastContent,\n} from './Cast.styled';\nimport noimage from '../../image/noimage.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchGetMovieCredits(movieId).then(data => setCast(data));\n  }, [movieId]);\n\n  if (!cast) return null;\n\n  return (\n    <>\n      <Container>\n        <CastList>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <CastItem key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : noimage\n                }\n                alt={name}\n              />\n              <CastContent>\n                {' '}\n                <CastText>{name}</CastText>\n                <CastText>Character: {character}</CastText>\n              </CastContent>\n            </CastItem>\n          ))}\n        </CastList>\n      </Container>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API__KEY = '2a9369ec86027d03e58d7a41eb0edc95';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchGetTrending = async () => {\n  try {\n    return await axios\n      .get(`/trending/movie/day?api_key=${API__KEY}`)\n      .then(r => r.data.results);\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    return await axios\n      .get(`/search/movie?api_key=${API__KEY}&language=en-US&query=${query}`)\n      .then(r => r.data.results);\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const fetchGetMovieDetails = async movieId => {\n  try {\n    return await axios\n      .get(`/movie/${movieId}?api_key=${API__KEY}&language=en-US`)\n      .then(r => r.data);\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const fetchGetMovieCredits = async movieId => {\n  try {\n    return await axios\n      .get(`/movie/${movieId}/credits?api_key=${API__KEY}&language=en-US`)\n      .then(r => r.data.cast);\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchGetMovieReviews = async movieId => {\n  try {\n    return await axios\n      .get(\n        `/movie/${movieId}/reviews?api_key=${API__KEY}&language=en-US&page=1`\n      )\n      .then(r => r.data.results);\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n"],"names":["Container","styled","CastList","CastItem","CastText","CastContent","movieId","useParams","useState","cast","setCast","useEffect","fetchGetMovieCredits","then","data","map","id","name","character","profile_path","src","noimage","alt","API__KEY","axios","fetchGetTrending","r","results","Error","fetchSearchMovies","query","fetchGetMovieDetails","fetchGetMovieReviews"],"sourceRoot":""}